

/**
 * Class for the generation of a circulary linked list 
 * A  circulary linked list is a collection of nodes that collectively form a circular sequence
 * Useful for round-robin scheduling
 * This data structure saves on the singular linked list as we only need to keep track of the tail. 
 * The head can be infered from the tail
 * The only added feature is rotate()
 * elements in the middle of the list can't be easily accessed or removed
 * 
 * @author Lau Sandt
 * https://github.com/lausandt/Java
 *
 */

public class CLinkedList<E> {
	/** nested class node */
	private static class Node<E> {
		private E element;				// reference to the element stored at this Node
		private Node<E> next;			        // reference to the subsequent Node in the list

		public Node(E e, Node<E> n) { 
			element = e;
			next = n;
		}
		/** return the elemt associated with the node */
		public E getElement() { return element;	}
		/** return the next node associated with this node */
		public Node<E> getNext() { return next; }
		/** set the next node to be associated with this node */
		public void setNext(Node<E> n) { next = n;}
	}

	private Node<E> tail = null;
	private int size = 0;

	/** returns the size of the list */
	public int size() { return size;}

	/** returns true if the list is empty */
	public boolean isEmpty() { return size==0; }

	/** returns the first element of the list */
	public E first() { 
		if (isEmpty()) {
			return null; 						// special case for the empty list 
		}
		return tail.getNext().getElement(); 				// the first node is the element tail refers to.
	}
	/** returns the last element of the list */
	public E last() { 
		if (isEmpty()) {
			return null; 
		}
		return tail.getElement();
	}
	/** moves the first node to the last of the list */
	public void rotate(Node<E> n) {
		if (tail != null)
			tail = tail.getNext();
	}
	/** add an element to head of the list */
	public void addFirst(E e) {	
		if (tail == null) {						// special case for when the list is empty
			tail = new Node<>(e, null);	
			tail.setNext(tail);
		}
		else {			
			Node<E> first = new Node<>(e, tail.getNext());
			tail.setNext(first); 				      // assign e to the head of the list
		}
		size++;
	}
	/** add an element to the tail of the list*/
	public void addLast(E e) {
        addFirst(e);
        tail = tail.getNext();					
		size++;
	}
	/** remove the first element from the list */
	public E removeFirst() {
		if (tail == null) return null; 				// special case where the list is empty
		E element = tail.getNext().getElement();      		// create the return value, the element associated with the current first on the list
		tail.setNext(tail.getNext().getNext()); 	        // set the next node for tail
		size--;
		return element;
	}
	@SuppressWarnings("rawtypes")                                   // method uses nonparameterised type
	public boolean equals(Object o) {
		if (o == null) return false;                            // only null equals null
		if (getClass() != o.getClass()) return false;           // for an object to be the same it must belong to the same class
		CLinkedList other = (CLinkedList) o;
		if (size != other.size) return false;                   // easy check
		Node walkA = tail.getNext();
		Node walkB = other.tail.getNext();
		while (walkA != tail ) {      
			if (! walkA.getElement().equals(walkB.getElement())) return false;
			walkA = walkA.getNext();
			walkB = walkB.getNext();
		}
		return true;
	}
	
	public CLinkedList<E> clone() throws CloneNotSupportedException {
		// creating the initial copy using Object.clone() (here super)
		@SuppressWarnings("unchecked")
		CLinkedList<E> other = (CLinkedList<E>) super.clone(); // safe cast 
		if (size > 0) {
			other.tail = new Node<>(tail.getElement(), null); 
			Node<E> walk = tail.getNext(); 		// walk through the rest of the list
			Node<E> otherTail = other.tail; 	// saving the tail so it can be updated last
			Node<E> currentHead = otherTail;	// saving the most recently created node as the current head
			while (walk != tail) {
				Node<E> newest = new Node<>(walk.getElement(), currentHead); // creating a new node with the current head as next node
				currentHead = newest;                                        // setting the newest node to be the current head
				walk = walk.getNext();                                       // getting the next node from the original
			}
			otherTail.setNext(currentHead);     // setting the current head as next node of the tail and so completing the circle
		}
		return other;
	}


}
