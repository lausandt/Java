package trees;

import java.util.Iterator;

import list_abstractions.Position;

/**
 * An interface for a tree data structure
 * @author Lau Sandt
 * https://github.com/lausandt/Java
 *  @param <E> generic 
 */

public interface Tree<E> extends Iterable<E> {
	
	// accessors
	/** Returns the position of the root of the tree (or null if the tree is empty) */
	Position<E> root();
	
	/** Returns the position of the parent of position p */
	Position<E> parent(Position<E> p) throws IllegalArgumentException;
	
	/** Returns an iterable collection containing the children of position p (if any) */
	Iterable<Position<E>> children(Position <E> p) throws IllegalArgumentException;
	
	/** Returns the number of children of position p */
	int numChildren(Position<E> p) throws IllegalArgumentException;
	
	// query methods 
	/** Returns true if position p has at least one child */
	boolean isInternal(Position<E> p) throws IllegalArgumentException;
	
	/** Returns true if position p has no children */
	boolean isExternal(Position<E> p) throws IllegalArgumentException;
	
	/** Returns true if position p is the root of the tree */
	boolean isRoot(Position<E> p) throws IllegalArgumentException;
	
	// general methods 
	
	/** Returns the number of position (thus elements) in the tree */
	int size();
	
	/** Returns true if the tree contains no positions (no elements) */
	boolean isEmpty();
	
	/** Returns an iterator for all elements in the tree (so that the tree itself is iterable) */
	Iterator<E> iterator();
	
	/** returns an interable collection of all positions of the tree */
	Iterable<Position<E>> positions();
	

}
